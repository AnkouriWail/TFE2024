#include <HardwareSerial.h>

// Paramètres du capteur
const int currentPin = 5; 
const float GAIN = 0.1; 
float OFFSET = 0.0; 

// Déclarations des fonctions
float readAverageVoltage(int pin, int numSamples = 10);
float calibrateOffset(int pin, int numSamples = 50);
void sendATCommand(const char* command);
void reponse();
void sendLoRaData(const char* hexData);
void sendStringData(const char* str);

HardwareSerial SerialLoRa(1);
bool joined = false;

void setup() {
  Serial.begin(115200);  
  Serial1.begin(115200, SERIAL_8N1, 37, 38);
  pinMode(36, OUTPUT);
  digitalWrite(36, HIGH);
  
  analogReadResolution(12); 
  OFFSET = calibrateOffset(currentPin);

  Serial.print("Offset calibré : ");
  Serial.println(OFFSET, 3);

  Serial.println("Configuration du module LoRa (RAK3172) via AT commands");

  // Envoyer les commandes AT et vérifier les réponses
  sendATCommand("AT");
  sendATCommand("AT+DEVEUI=AC1F09FFFE11C8B9");
  sendATCommand("AT+APPEUI=334455BD44BBB333"); 
  sendATCommand("AT+APPKEY=81F2A0BFC0B95A3249D3AC9694E843CF"); 

  // Configurer la région 
  sendATCommand("AT+NWM=1"); 
  sendATCommand("AT+DR=0");

  delay(1000); 

  sendATCommand("AT+JOIN");
  Serial.println("Commande JOIN envoyée");
}

void loop() {
  reponse();


  static unsigned long lastSendTime = 0;
  if (joined && millis() - lastSendTime > 10000) {
    lastSendTime = millis();
    float voltage = readAverageVoltage(currentPin);
    float current = (voltage - OFFSET) / GAIN; 

    // Préparer et envoyer les données
    char buffer[50];
    snprintf(buffer, sizeof(buffer), "Voltage: %.3fV | Current: %.3fA", voltage, current);
    sendStringData(buffer); // Envoyer les données de courant et de tension

    // Affichage des résultats
    Serial.print("Tension (V) : ");
    Serial.print(voltage, 3);
    Serial.print(" | Courant (A) : ");
    Serial.println(current, 3);
  }
  delay(200);
}

void sendATCommand(const char* command) {
  Serial1.println(command);
  Serial.print("Envoi de la commande AT: ");
  Serial.println(command);
  delay(2000); // Délai pour que le module traite la commande
  reponse();
}

void reponse() {
  while (Serial1.available()) {
    String line = Serial1.readStringUntil('\n');
    Serial.print("Réponse du module LoRa: ");
    Serial.println(line);
    if (line.indexOf("+EVT:JOINED") != -1) {
      Serial.println("Appareil rejoint le réseau avec succès!");
      joined = true;
    } else if (line.indexOf("+EVT:JOIN_FAILED") != -1) {
      Serial.println("Échec de la jonction!");
      joined = false;
    }
    line = "";
  }
}

void sendLoRaData(const char* hexData) {
  String cmd = "AT+SEND=1:"; // Port 1
  cmd += String(hexData);
  sendATCommand(cmd.c_str());
  Serial.print("Envoi des données: ");
  Serial.println(hexData);
}

void sendStringData(const char* str) {
  String hexString = "";
  while (*str) {
    char hex[3];
    sprintf(hex, "%02X", *str++);
    hexString += hex;
  }
  sendLoRaData(hexString.c_str());
}

float readAverageVoltage(int pin, int numSamples) {
  long total = 0;
  for (int i = 0; i < numSamples; i++) {
    total += analogRead(pin); // Lire la valeur analogique brute
    delay(10); // Pause entre chaque échantillon
  }
  // Conversion de la valeur brute en tension (V)
  return (total / numSamples) * (3.3 / 4095.0); // 3.3 V est la plage maximale
}

float calibrateOffset(int pin, int numSamples) {
  float voltage = readAverageVoltage(pin, numSamples);
  return voltage;
}
